"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runtime = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path/posix"));
const compiler_js_1 = require("./compiler.js");
const file_js_1 = require("./file.js");
const ssp_js_1 = require("./ssp.js");
const jsxDom = fs.readFileSync(__dirname + '/../src/jsx-dom.ts');
const jsxStrings = fs.readFileSync(__dirname + '/../src/jsx-strings.ts');
class Runtime {
    files = new Map();
    #deps = new Map();
    handlers = new Map();
    #siteDir;
    #processor;
    #jsxContentSsg;
    #jsxContentBrowser;
    compiler = new compiler_js_1.Compiler();
    constructor(config) {
        this.#siteDir = config?.siteDir ?? 'site';
        this.rebuildAll();
        this.#processor = config?.processor ?? ssp_js_1.processSite;
        this.#jsxContentSsg = config?.jsxContentSsg ?? jsxStrings;
        this.#jsxContentBrowser = config?.jsxContentBrowser ?? jsxDom;
    }
    build() {
        this.#shimIfNeeded('/@imlib/jsx-browser.ts', this.#jsxContentBrowser);
        this.#shimIfNeeded('/@imlib/jsx-node.ts', this.#jsxContentSsg);
        const processor = (this.files.get('/@imlib/processor.js')?.module?.require().default ??
            this.#processor);
        const start = Date.now();
        const outfiles = processor(this.files.values());
        console.log(`Time: ${Date.now() - start} ms`);
        return outfiles;
    }
    rebuildAll() {
        this.compiler = new compiler_js_1.Compiler();
        this.#loadDir('/');
    }
    pathsUpdated(...paths) {
        if (paths.includes('package.json')) {
            console.log('rebuilding all');
            this.rebuildAll();
            return;
        }
        const filepaths = paths.map(p => p.slice(this.#siteDir.length));
        for (const filepath of filepaths) {
            if (fs.existsSync(this.realPathFor(filepath))) {
                this.#createFile(filepath);
            }
            else {
                this.files.delete((0, file_js_1.convertTsExts)(filepath));
            }
        }
        const resetSeen = new Set();
        for (const filepath of filepaths) {
            this.#resetDepTree(filepath, resetSeen);
        }
    }
    #loadDir(base) {
        const dirRealPath = this.realPathFor(base);
        const files = fs.readdirSync(dirRealPath);
        for (const name of files) {
            if (name.startsWith('.'))
                continue;
            if (name.endsWith('.d.ts'))
                continue;
            const realFilePath = path.join(dirRealPath, name);
            const stat = fs.statSync(realFilePath);
            if (stat.isDirectory()) {
                this.#loadDir(path.join(base, name));
            }
            else if (stat.isFile()) {
                const filepath = path.join(base, name);
                this.#createFile(filepath);
            }
        }
    }
    #createFile(filepath) {
        this.#putFile(filepath, fs.readFileSync(this.realPathFor(filepath)));
    }
    #putFile(filepath, content) {
        const file = new file_js_1.File(filepath, content, this);
        this.files.set(file.path, file);
    }
    #shimIfNeeded(filepath, content) {
        if (!this.files.has((0, file_js_1.convertTsExts)(filepath))) {
            this.#putFile(filepath, content);
        }
    }
    realPathFor(filepath) {
        return path.join(this.#siteDir, filepath);
    }
    addDeps(requiredBy, requiring) {
        let list = this.#deps.get(requiring);
        if (!list)
            this.#deps.set(requiring, list = new Set());
        list.add(requiredBy);
    }
    #resetDepTree(path, seen) {
        if (seen.has(path))
            return;
        seen.add(path);
        for (const [requiring, requiredBy] of this.#deps) {
            if (path.startsWith(requiring)) {
                this.#deps.delete(requiring);
                for (const dep of requiredBy) {
                    const module = this.files.get((0, file_js_1.convertTsExts)(dep))?.module;
                    module?.resetExports();
                    this.#resetDepTree(dep, seen);
                }
            }
        }
    }
}
exports.Runtime = Runtime;
