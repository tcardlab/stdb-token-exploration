"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = void 0;
const swc = __importStar(require("@swc/core"));
const fs_1 = require("fs");
class Compiler {
    packageJson = JSON.parse((0, fs_1.readFileSync)('package.json').toString('utf8'));
    compile(code, realFilePath, browserFilePath) {
        let prefix = '';
        if (browserFilePath && !browserFilePath.startsWith('/@imlib/')) {
            const levels = browserFilePath.match(/\//g).length - 1;
            prefix = '.' + '/..'.repeat(levels);
        }
        const opts = {
            sourceMaps: 'inline',
            module: { type: 'es6' },
            plugin: (program) => {
                return this.#renameImports(program, browserFilePath);
            },
            jsc: {
                parser: {
                    syntax: 'typescript',
                    tsx: true,
                },
                target: 'esnext',
                transform: {
                    react: {
                        runtime: 'automatic',
                        importSource: '/@imlib',
                        throwIfNamespace: false,
                    }
                }
            }
        };
        if (realFilePath) {
            opts.module.type = 'commonjs';
            opts.sourceFileName = realFilePath;
            // options.sourceMapOptions = { compiledFilename: realFilePath };
            // options.filePath = pathToFileURL(realFilePath).href;
        }
        const result = swc.transformSync(code, opts);
        if (realFilePath) {
            result.code = result.code.replace(/"\/@imlib\/jsx-runtime"/g, `"/@imlib/jsx-node.js"`);
        }
        else {
            result.code = result.code.replace(/"\/@imlib\/jsx-runtime"/g, `"${prefix}/@imlib/jsx-browser.js"`);
        }
        return result;
    }
    #renameImports(program, browserFilePath) {
        if (browserFilePath) {
            for (const imp of program.body) {
                if (imp.type === 'ImportDeclaration') {
                    const dep = imp.source.value;
                    const version = (this.packageJson.devDependencies[dep] ??
                        this.packageJson.dependencies[dep]);
                    if (version) {
                        delete imp.source.raw;
                        imp.source.value = `https://cdn.jsdelivr.net/npm/${dep}@${version}/+esm`;
                    }
                    else {
                        const typeDep = '@types/' + dep.replace(/^@(.+?)\/(.+)/, '$1__$2');
                        if (this.packageJson.devDependencies[typeDep]) {
                            delete imp.source.raw;
                            imp.source.value = `https://cdn.jsdelivr.net/npm/${dep}/+esm`;
                        }
                    }
                }
            }
        }
        return program;
    }
}
exports.Compiler = Compiler;
