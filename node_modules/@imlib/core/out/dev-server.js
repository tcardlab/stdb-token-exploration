"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDevServer = startDevServer;
const chokidar = __importStar(require("chokidar"));
const http = __importStar(require("http"));
const mimetypes = __importStar(require("mime-types"));
const path = __importStar(require("path"));
function startDevServer(runtime, config) {
    process.env['DEV'] = '1';
    const server = new Server();
    server.startServer(config?.port ?? 8080);
    server.handlers = runtime.handlers;
    const outfiles = runtime.build();
    server.files = outfiles;
    const updatedPaths = new Set();
    let reloadFsTimer;
    const pathUpdated = (filePath) => {
        updatedPaths.add(filePath.split(path.sep).join(path.posix.sep));
        clearTimeout(reloadFsTimer);
        reloadFsTimer = setTimeout(() => {
            console.log('Rebuilding site...');
            try {
                console.log(updatedPaths)
                runtime.pathsUpdated(...updatedPaths);
                const outfiles = runtime.build();
                server.files = outfiles;
                updatedPaths.clear();
                server.rebuilt();
                server.broadcastSSE('/hot-reload', { type: 'reload' });  // Broadcast reload event
            }
            catch (e) {
                console.error(e);
            }
            console.log('Done.');
        }, 100);
    };
    (chokidar.watch('package.json', { ignoreInitial: true, cwd: process.cwd() })
        .on('change', pathUpdated));
    (chokidar.watch('site', { ignoreInitial: true, cwd: process.cwd() })
        .on('add', pathUpdated)
        .on('change', pathUpdated)
        .on('unlink', pathUpdated));
}

function __hot_reload () {
  const eventSource = new EventSource('/hot-reload');
  eventSource.onmessage = (event) => {
    const {type} = JSON.parse(event.data)
    if (type === "reload") {
      location.reload();
    }
  }
}

class Server {
    files;
    handlers;
    rebuilt = () => { };
    sseClients = new Set();
    startServer(port) {
        const server = http.createServer((req, res) => {
            const url = req.url.split('?')[0];

            // Handle SSE connection
            if (url === '/hot-reload') {
                res.writeHead(200, {
                    'Content-Type': 'text/event-stream',
                    'Cache-Control': 'no-cache',
                    'Connection': 'keep-alive',
                });
                this.sseClients.add(res);

                // Remove client when connection is closed
                req.on('close', () => {
                    this.sseClients.delete(res);
                });
                return;
            }

            if (req.method === 'POST') {
                const handler = this.handlers?.get(url);
                if (handler) {
                    const data = [];
                    req.on('data', (chunk) => {
                        data.push(chunk);
                    });
                    req.on('end', () => {
                        let redirect;
                        this.rebuilt = () => {
                            res.statusCode = 302;
                            res.setHeader('Location', redirect);
                            res.end();
                        };
                        const body = Buffer.concat(data).toString('utf8');
                        redirect = handler(body);
                    });
                }
                return;
            }
            const getFile = (url) => {
                const content = this.files?.get(url);
                return content && { url, blob: content };
            };
            const found = (
                getFile(url) ??
                getFile(url + '.html') ??
                getFile(path.posix.join(url, 'index.html'))
            );
            if (found) {
                res.statusCode = 200;
                const contentType = mimetypes.contentType(path.extname(found.url));
                res.setHeader('content-type', contentType || 'application/octet-stream');

                if (process.env.NODE_ENV !== 'production' && contentType.startsWith('text/html')) {
                    let html = found.blob.toString('utf8');
                    html += `<script>${__hot_reload.toString()};__hot_reload();</script>`;
                    res.end(html);
                } else {
                    res.end(found.blob);
                }
            }
            else {
                res.statusCode = 404;
                res.end('File not found');
            }
        });
        server.listen(port);
        console.log(`Running on http://localhost:${port}`);
    }

    broadcastSSE(url, data) {
        this.sseClients.forEach(client => {
            client.write(`data: ${JSON.stringify(data)}\n\n`);
        });
    }
}
