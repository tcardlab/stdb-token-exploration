"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Module = void 0;
const path = __importStar(require("path/posix"));
class Module {
    content;
    filepath;
    runtime;
    #fn;
    #exports;
    source;
    constructor(content, filepath, runtime) {
        this.content = content;
        this.filepath = filepath;
        this.runtime = runtime;
        this.source = content;
    }
    require() {
        if (!this.#exports) {
            this.#exports = Object.create(null);
            this.#run();
        }
        return this.#exports;
    }
    resetExports() {
        this.#exports = undefined;
    }
    #run() {
        if (!this.#fn) {
            const realFilePath = this.runtime.realPathFor(this.filepath);
            const transformed = this.runtime.compiler.compile(this.content, realFilePath);
            const sourceCode = transformed.code;
            // const sourceMapBase64 = Buffer.from(JSON.stringify(transformed.sourceMap)).toString('base64url');
            // const sourceMap = `\n//# sourceMappingURL=data:application/json;base64,${sourceMapBase64}`;
            // this.content = sourceCode + sourceMap;
            this.content = sourceCode;
            const fn = new Function('require', 'exports', this.content);
            const require = (path) => this.#require(path);
            this.#fn = () => fn(require, this.#exports);
        }
        this.#fn();
    }
    #require(toPath) {
        if (toPath === 'handlers!')
            return this.runtime.handlers;
        if (!toPath.match(/^[./]/)) {
            const requirePaths = [
                path.join(process.cwd(), 'node_modules'),
                ...(require.resolve.paths(toPath) ?? []),
            ];
            const reqPath = require.resolve(toPath, { paths: requirePaths });
            return require(reqPath);
        }
        const absPath = path.resolve(path.dirname(this.filepath), toPath);
        const module = this.runtime.files.get(absPath)?.module;
        if (module) {
            this.runtime.addDeps(this.filepath, module.filepath);
            return module.require();
        }
        if (toPath.endsWith('/')) {
            const dirPath = absPath.endsWith('/') ? absPath : absPath + '/';
            this.runtime.addDeps(this.filepath, dirPath);
            const files = [...this.runtime.files.values()]
                .filter(file => file.path.startsWith((dirPath)));
            return files;
        }
        throw new Error(`Can't find file at path: ${toPath}`);
    }
}
exports.Module = Module;
